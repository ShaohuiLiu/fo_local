%% 01/31/2023

% Author: Shaohui Liu
% email: shaohui.liu@utexas.edu

% Run simulation_impulse.m by calling s_simu64_impulse.m in /68_bus_tests/ 
% first, generating impulse response condition like in 9-bus case by 
% perturbing the mechanical power. Input locations at all generators 1-16.
% Ambient data generated by running simulation_ambient.m by calling 
% s_simu64_ambient.m for 1200s with 200Hz as step size.
% FO data generated by running simulation_fo.m for 150s (new steady state 
% reached after 50s).
% Load saved results and run localization tests.
% 01/31 initilize the localization tests with oscillation data.

%% Load pre-generated dataset (details see bottom Section)
clear all;clc

% load inferred and simulated impulse responses
result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/';
% filename = strcat(result_path,'localization_data_013123.mat'); % saved on 01/31/23
filename = strcat(result_path,'localization_data_013123_1.mat'); % saved on 03/21/23, verified w/ 0131
% filename = strcat(result_path,'localization_data_freq_031523.mat'); % inferred impz 03/15/23
load(filename)

% load corrected impz td, with damping
filename = strcat(result_path,'impulse_td_allgen_essential1.mat'); % damping, w/ pss, saved on 03/09/23
load(filename)

%% load simulated oscillation
% filename = strcat(result_path,'fo_td_p143hz_essential.mat'); % saved on 01/31/23
% filename = strcat(result_path,'fo_td_p143hz_ambient_essential.mat'); % saved on 03/21/23
filename = strcat(result_path,'fo_td_p43hz_essential.mat'); % saved on 02/01/23
% filename = strcat(result_path,'fo_td_p43hz_ambient_essential.mat'); % saved on 03/20/23
% filename = strcat(result_path,'fo_td_p714hz_essential.mat'); % saved on 02/01/23
% filename = strcat(result_path,'fo_td_p714hz_ambient_essential.mat'); % saved on 02/02/23
% filename = strcat(result_path,'fo_td_p57hz_ambient_essential.mat'); % saved on 03/21/23
% filename = strcat(result_path,'fo_td_p57hz_damp_nopss_gen_essential.mat'); % saved on 03/15/23
load(filename)

%% Data pre-preprocessing
% figure
% plot(t_impz{1},freq_impz{1}(1,:))
% hold off

n_gen = 16;

dt = 0.005; % 200hz
impz_td = cell(n_gen,1);
t_impz1 = cell(n_gen,1);
for idx = 1 : n_gen
    t_impz1{idx} = t_impz{idx}(200:end); % 1s, total 14s
    impz_td{idx} = freq_impz{idx}(:,200:end)';
end

T_data = t_impz1{idx}(end)-t_impz1{idx}(1);
for idx = 1 : n_gen
    osci_td{idx} = osci_td{idx}(:,end-T_data/dt:end)';
    t_osci{idx} = t_osci{idx}(end-T_data/dt:end);
end


%% Transform data to frequency domain by FFT

plot_idx = 1 : length(t_osci{1});

fft_td = cell(n_gen,1);
fft_infr = cell(n_gen,1);

L = length(osci_td{1}(:,1));
Fs = 1/dt;
f = Fs*(0:(L/2))/L;
for idx = 1 : n_gen
    
    if contains(filename,'ambient')
        disp('With ambient input.')
        f_band = [0.001,20];
        Y_temp = zeros(size(osci_td{idx}));
        for i = 1 : n_gen
%             Y_temp(:,i) = bandpass(osci_td{idx}(:,i),f_band,Fs);
            Y_temp(:,i) = lowpass(osci_td{idx}(:,i),10,Fs);
%             Y_temp(:,i) = osci_td{idx}(:,i); % original
        end
        Y1 = fft(Y_temp);
    else
    Y1 = fft(osci_td{idx});
    end
%     Y1 = fft(osci_td{idx});
    % Y2 = fft(freq_resp{idx}(plot_idx,:)); % recovered, normalized
    Y2 = fft(impz_td{idx}); % simulated, un-normalized

    % remove small-magnitude transform values 
    tol = 1e-7;
%     Y1(Y1 < tol) = 0;
%     Y2(Y2 < tol) = 0;
    Y1(abs(Y1) < tol) = 0;
    Y2(abs(Y2) < tol) = 0;

    Y1(2:end,:) = 2.* Y1(2:end,:);
    Y2(2:end,:) = 2.* Y2(2:end,:);

    fft_td{idx} = transpose(Y1(1:L/2+1,:));
    fft_infr{idx} = transpose(Y2(1:L/2+1,:));

end

%% check FFT results

% figure
% for idx = 1 : n_gen
%     subplot(4,4,idx)
%     for i = 1 : n_gen
%         plot(f,abs(fft_td{idx}(i,:)))
%         hold on
%     end
%     title(strcat('FO source',num2str(idx)))
%     xlim([0,1])
% end
% 
% figure
% for idx = 1 : n_gen
%     nexttile
%     for i = 1 : n_gen
%         if i == idx
%             plot(f,abs(fft_infr{idx}(i,:)),'LineWidth',2)
%             hold on
%         else
%             plot(f,abs(fft_infr{idx}(i,:)),'LineWidth',1)
%             hold on
%         end
%     end
%     title(strcat('input',num2str(idx)))
%     xlim([0,2])
% end






%% Inference test
% only need to fit the oscillation frequency \omega_f

% input_loc = 3;
err_all = zeros(n_gen,n_gen);
for input_loc = 1 : n_gen

u = zeros(n_gen,1);
m_loc = zeros(n_gen,1);
for i = 1 : n_gen
    [m_val,m_loc(i)] = max(abs(fft_td{input_loc}(i,2:end))); % assume input loc 1, \omega_f>0
    m_loc(i) = m_loc(i) + 1;
end

% Infer u for each location
% disp(m_loc');
u1 = zeros(n_gen,1);
u2 = zeros(n_gen,1);
for i = 1 : n_gen
    u(i) = (fft_infr{i}(:,m_loc(1))'*fft_infr{i}(:,m_loc(1))) \ (fft_infr{i}(:,m_loc(1))' ...
           *fft_td{input_loc}(:,m_loc(i)));
%     f1 = @(x)(x*fft_infr{i}(:,m_loc(i)) - fft_td{input_loc}(:,m_loc(i)))'...
%            *(x*fft_infr{i}(:,m_loc(i)) - fft_td{input_loc}(:,m_loc(i)));
%     u1(i)=fsolve(f1,1+1i/1);
    u2(i) = regress(fft_td{input_loc}(:,m_loc(i)),fft_infr{i}(:,m_loc(i)));
%     fprintf('input%d real: %.4f %.4f %.4f \n',i,real(u(i)),real(u1(i)),real(u2(i)));
%     fprintf('input%d imag: %.4f %.4f %.4f \n',i,imag(u(i)),imag(u1(i)),imag(u2(i)));
%     % same real, fsolve imag sol always 1 (same as initial)
end
% 
fprintf('Input location %d .\n',input_loc)
localization_err = zeros(1,n_gen);
for i = 1 : n_gen
    localization_err(i) = norm(u(i)*fft_infr{i}(:,m_loc(i)) - fft_td{input_loc}(:,m_loc(i)))^2;
%     disp((u(i)*fft_infr{i}(:,m_loc(i)) - fft_td{input_loc}(:,m_loc(i)))' * ...
%          (u(i)*fft_infr{i}(:,m_loc(i)) - fft_td{input_loc}(:,m_loc(i))));
%     disp(norm(transpose(u(i)*fft_infr{i}(:,m_loc(i)) - fft_td{input_loc}(:,m_loc(i))) * ...
%          (u(i)*fft_infr{i}(:,m_loc(i)) - fft_td{input_loc}(:,m_loc(i)))));
end
[val_temp,loc_temp] = min(localization_err);
if loc_temp == input_loc
    fprintf('Inferred location %d , err %.2f .\n',loc_temp,val_temp)
else
    fprintf('Inferred location %d , err %.2f . Wrong!\n',loc_temp,val_temp)
end
err_all(input_loc,:) = localization_err;
% disp(localization_err);
% disp('')

end


%% 
figure
% heatmap(log(err_all))
heatmap(err_all)





%% Load simulation and inferred results (saved in localization_data_013123.mat)
% simu_flag = 1; % successful
% dt_const = 0.005;  % uniform time step, o.w. use default in .m sys file.
% T_tot = 1200; % total time, if 0 then use default 15s
% 
% freq_ambient = cell(1,1);
% ang_ambient = cell(1,1);
% t_ambient = cell(1,1);
% n_gen = zeros(1,1); % number of generators
% n_t = zeros(1,1); % number of samples
% 
% load_all_data = 0; % if 1, load all raw data, else just load freq and angle
% 
% result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/';
% if simu_flag == 1
%     if load_all_data == 1
%         filename = strcat(result_path,'ambient_td_',num2str(T_tot),'s.mat');
% %     filename = strcat(result_path,'ambient_td_results.mat');
%     else
%         filename = strcat(result_path,'ambient_td_',num2str(T_tot),'s_essential.mat');
%     end
%     load(filename)
%     ang_ambient{1} = mac_ang;
%     t_ambient{1} = t;
%     n_gen(1) = size(mac_ang,1);
%     n_t(1) = size(mac_ang,2);
%     freq_ambient{1} = mac_spd - ones(n_gen,n_t); % speed deviation
%     disp('Simulated ambient data loaded successfully!')
% else
%     disp('Load failed!!')
%     freq_ambient{1} = 'Nan'; % failed simulation
%     ang_ambient{1} = 'Nan';
%     t_ambient{1} = 'Nan';
% end
% 
% 
% % Load inffered impz from ambient data
% dt = dt_const;
% T_start = 20; % we use the data start from 20s
% 
% ambient_inference_switch = 1; % if 1, run inference algorithm
% 
% if ambient_inference_switch == 1
%     disp('Ambient inference for impz start...')
%     [T1,freq_data] = ambient_data_process(freq_ambient{1},t_ambient{1},T_start); % remove first few seconds
%     freq_resp = ambient_frequency_response(freq_data',n_gen,dt);
% else
%     disp('Load inferred freq impz instead.')
%     filename = strcat(result_path,'ambient_1200s_inferred_freq_resp.mat'); % saved on 01/30/23
%     load(filename)
% end
% 
% % % inferred response of input at generator 1
% % freq_resp1 = freq_resp{1};
% 
% disp('Ambient inference for impz finished.')

% % Load simulated impz data
% result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/';
% filename = strcat(result_path,'impulse_td_allgen_essential.mat'); % saved on 01/31/23
% load(filename)


%% load FO data of 0.1428hz (input at all locations) - new steady after 50s
% n_gen0 = 16;
% osci_td = cell(n_gen0,1);
% t_osci = cell(n_gen0,1);
% 
% % result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/fo_td_p143hz/';
% % result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/fo_td_p143hz_ambient/';
% % result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/fo_td_p43hz/';
% % result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/fo_td_p43hz_ambient/';
% % result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/fo_td_p714hz/';
% % result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/fo_td_p714hz_ambient/';
% result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/fo_td_p57hz_ambient/';
% % result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/fo_td_p57hz_damp_nopss/';
% 
% 
% for idx = 1 : n_gen0
%     filename = strcat(result_path,'fo_td_fault',num2str(idx),'.mat');
%     load(filename)
% 
%     t_osci{idx} = t;
%     n_gen = size(mac_ang,1);
%     n_t = size(mac_ang,2);
%     osci_td{idx} = mac_spd - ones(n_gen,n_t); % speed deviation
% end

%% plot 

% % load simulated oscillation
% result_path = '/Users/shaohui/Documents/MATLAB/PST/68_bus_tests/simulation_result/';
% % filename = strcat(result_path,'fo_td_p143hz_essential.mat'); % saved on 01/31/23
% % filename = strcat(result_path,'fo_td_p43hz_essential.mat'); % saved on 02/01/23
% % filename = strcat(result_path,'fo_td_p714hz_essential.mat'); % saved on 02/01/23
% filename = strcat(result_path,'fo_td_p714hz_ambient_essential.mat'); % saved on 02/02/23
% load(filename)
% 
% dt = 0.005; % 200hz
% n_gen = 16;
% impz_td = cell(n_gen,1);
% t_impz1 = cell(n_gen,1);
% for idx = 1 : n_gen
%     t_impz1{idx} = t_impz{idx}(200:end); % 1s, total 14s
%     impz_td{idx} = freq_impz{idx}(:,200:end)';
% end
% 
% T_data = t_impz1{idx}(end)-t_impz1{idx}(1);
% for idx = 1 : n_gen
%     osci_td{idx} = osci_td{idx}(:,end-T_data/dt:end)';
%     t_osci{idx} = t_osci{idx}(end-T_data/dt:end);
% end
% 
% figure
% idx = 9;
% for i = 1 : 16
%     if i == idx
% %         plot(t_osci{idx},osci_td{idx}(i,:),'LineWidth',1.5);
%             plot(t_osci{idx},osci_td{idx}(:,i),'LineWidth',1.5);
%     else
% %         plot(t_osci{idx},osci_td{idx}(i,:),'LineWidth',0.75);
%             plot(t_osci{idx},osci_td{idx}(:,i),'LineWidth',0.75);
%     end
%     hold on
% end
% title(strcat('Input',num2str(idx)))

% figure
% for idx = 1 : 16
%     subplot(4,4,idx)
%     for i = 1 : 16
%         if i == idx
%             plot(t_osci{idx},osci_td{idx}(i,:),'LineWidth',1.5);
% %             plot(t_osci{idx},osci_td{idx}(:,i),'LineWidth',1.5);
%         else
%             plot(t_osci{idx},osci_td{idx}(i,:),'LineWidth',0.75);
% %             plot(t_osci{idx},osci_td{idx}(:,i),'LineWidth',0.75);
%         end
%         hold on
%     end
%     title(strcat('Input',num2str(idx)))
% end



